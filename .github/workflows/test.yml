name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        emacs-version:
          - 29.4
          - 30.1
        experimental: [false]
        include:
          - os: ubuntu-latest
            emacs-version: snapshot
            experimental: true
          - os: macos-latest
            emacs-version: snapshot
            experimental: true
          - os: windows-latest
            emacs-version: snapshot
            experimental: true

    steps:
      - uses: actions/checkout@v4

      - uses: jcs090218/setup-emacs@master
        with:
          version: ${{ matrix.emacs-version }}

      - uses: emacs-eask/setup-eask@master
        with:
          version: "snapshot"

      - name: Run tests
        run: |
          eask clean all
          eask package
          eask install
          eask compile
          eask test buttercup

      - name: Collect coverage
        if: matrix.os == 'ubuntu-latest' && matrix.emacs-version == '30.1'
        continue-on-error: true
        run: |
          # Run tests with undercover.el for coverage collection
          eask exec emacs --batch \
            -l undercover \
            --eval '(setq undercover-force-coverage t)' \
            -l jj.el \
            -l tests/test-helper.el \
            -l tests/test-jj.el \
            --eval '(buttercup-run)' \
            || true

      - name: Format coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.emacs-version == '30.1'
        continue-on-error: true
        run: |
          # Format coverage as markdown
          bash scripts/format-coverage.sh > coverage-report.md || echo "## Coverage Report\n\n**Status:** Coverage data not available" > coverage-report.md

      - name: Add coverage to Job Summary
        if: matrix.os == 'ubuntu-latest' && matrix.emacs-version == '30.1'
        continue-on-error: true
        run: |
          cat coverage-report.md >> $GITHUB_STEP_SUMMARY

      - name: Post coverage to PR
        if: matrix.os == 'ubuntu-latest' && matrix.emacs-version == '30.1' && github.event_name == 'pull_request'
        continue-on-error: true
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: coverage-report.md
          edit-mode: replace

  package-lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: jcs090218/setup-emacs@master
        with:
          version: 30.1

      - uses: emacs-eask/setup-eask@master
        with:
          version: "snapshot"

      - name: Run package-lint
        run: |
          eask clean all
          eask package
          eask install
          eask lint package

  checkdoc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: jcs090218/setup-emacs@master
        with:
          version: 30.1

      - uses: emacs-eask/setup-eask@master
        with:
          version: "snapshot"

      - name: Run checkdoc
        run: |
          eask clean all
          eask package
          eask install
          eask lint checkdoc

  byte-compile:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: jcs090218/setup-emacs@master
        with:
          version: 30.1

      - uses: emacs-eask/setup-eask@master
        with:
          version: "snapshot"

      - name: Run byte-compile
        run: |
          eask clean all
          eask package
          eask install
          eask compile --strict

  all-checks-pass:
    needs: [test, package-lint, checkdoc, byte-compile]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo '${{ toJSON(needs) }}' | jq -e 'to_entries | all(.value.result == "success")'
